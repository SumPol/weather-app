import React from 'react';
import styles from './styles';
import colors from '../../assets/colorThemes';
import {
  ActivityIndicator,
  SafeAreaView,
  StatusBar,
  TouchableOpacity,
  Text,
  Image,
  View,
  Alert,
} from 'react-native';
import ModalCityScreen from '../modalCityScreen';
import * as api from '../../api/weather';

/** –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω */
class MainScreen extends React.Component {
  /** –í—ã–∑—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –º–æ–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Main - –≥–ª–∞–≤–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ */
  constructor(props) {
    super(props);
    this.state = {
      isOpenCityList: false,
      temperature: '',
      currentCityObject: {},
      weatherObject: {},
    };
    //this.getWeather();
  }

  /** –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥–æ—Ä–æ–¥–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–µ –≤ state */
  getWeather = async cityObject => {
    console.log('getWeather', cityObject);
    try {
      const lat = cityObject.geo_lat;
      const lon = cityObject.geo_lon;
      const arg = {lat, lon};

      const res = await api.currentWeather(arg);
      console.log('getWeather res', res);

      this.setState({
        weatherObject: {
          clouds: res.clouds,
          main: res.main,
          rain: res.rain || {},
          weather: res.weather,
          wind: res.wind,
          snow: res.snow || {},
        },
      });
    } catch (error) {
      console.error(error);
      Alert.alert('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòû');
    }
  };

  /** –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
  handleOpenModal = () => {
    this.setState({isOpenCityList: true});
  };

  /** –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
  handleCloseModal = () => {
    this.setState({isOpenCityList: false});
  };

  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ state –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≥–æ–¥—É –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ */
  setCurrentCityObject = cityObject => {
    this.setState({currentCityObject: cityObject});
    this.getWeather(cityObject);
    this.handleCloseModal();
  };

  render() {
    const isDarkMode = true;

    console.log('Main', this, this.state);
    return (
      <SafeAreaView style={styles.backgroundStyle}>
        <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
        <View style={styles.content}>
          <TouchableOpacity
            style={styles.location}
            onPress={this.handleOpenModal}>
            <Text style={styles.cityText}>
              {!this.state.currentCityObject.city
                ? '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥'
                : this.state.currentCityObject.city}
            </Text>
            <Image
              style={styles.locationImage}
              source={require('../../assets/images/location_image.png')}
            />
          </TouchableOpacity>
          <Image
            style={styles.weatherImage}
            source={require('../../assets/images/cat_image.gif')}
          />
          {this.state.weatherObject?.main ? (
            <>
              <Text style={styles.timeText}>–°–µ–π—á–∞—Å</Text>
              <Text style={styles.temperatureText}>
                {this.state.weatherObject.main.temp} ‚ÑÉ
              </Text>
            </>
          ) : (
            <ActivityIndicator size="large" color={colors.main} />
          )}
        </View>

        <ModalCityScreen
          isOpenValue={this.state.isOpenCityList}
          onClose={this.handleCloseModal}
          onPressCity={this.setCurrentCityObject}
        />
      </SafeAreaView>
    );
  }
}

export default MainScreen;
